// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modelo.Context;

#nullable disable

namespace Modelo.Migrations
{
    [DbContext(typeof(EasyFoodFlowContext))]
    partial class EasyFoodFlowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Modelo.Models.Aderezo", b =>
                {
                    b.Property<int>("IdAderezo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAderezo"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("IdPlato")
                        .HasColumnType("int");

                    b.Property<int>("IdRestaurante")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdAderezo");

                    b.HasIndex("IdRestaurante");

                    b.ToTable("Aderezo", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.AderezoPedidoPlato", b =>
                {
                    b.Property<int>("IdAderezoPedidoPlato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAderezoPedidoPlato"));

                    b.Property<int>("AderezoIdAderezo")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdAderezo")
                        .HasColumnType("int");

                    b.Property<int>("IdPedidoPlato")
                        .HasColumnType("int");

                    b.Property<int>("PedidoPlatoIdPedidoPlato")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioMomento")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdAderezoPedidoPlato");

                    b.HasIndex("AderezoIdAderezo");

                    b.HasIndex("IdAderezo");

                    b.HasIndex("IdPedidoPlato");

                    b.HasIndex("PedidoPlatoIdPedidoPlato");

                    b.ToTable("AderezoPedidoPlato", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.CadetePedido", b =>
                {
                    b.Property<int>("IdCadetePedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCadetePedido"));

                    b.Property<int>("DniCadete")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.HasKey("IdCadetePedido");

                    b.HasIndex("DniCadete");

                    b.HasIndex("IdPedido");

                    b.ToTable("CadetePedido", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("IdRestaurante")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categoria", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Menu", b =>
                {
                    b.Property<int>("IdMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMenu"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdRestaurante")
                        .HasColumnType("int");

                    b.Property<byte[]>("Pdf")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdMenu");

                    b.HasIndex("IdRestaurante");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPedido"));

                    b.Property<string>("DireccionEntrega")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DniCliente")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Nuevo");

                    b.Property<DateTime?>("FechaHoraCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdRestaurante")
                        .HasColumnType("int");

                    b.Property<string>("MetodoPago")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("DniCliente");

                    b.HasIndex("IdRestaurante");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.PedidoPlato", b =>
                {
                    b.Property<int>("IdPedidoPlato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPedidoPlato"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdPlato")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("PrecioMomento")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedidoPlato");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdPlato");

                    b.ToTable("PedidoPlato", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Permiso", b =>
                {
                    b.Property<int>("IdPermiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPermiso"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPermiso");

                    b.ToTable("Permiso", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Persona", b =>
                {
                    b.Property<int>("Dni")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Dni"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Dni");

                    b.ToTable("Persona", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Modelo.Models.Plato", b =>
                {
                    b.Property<int>("IdPlato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlato"));

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("IdRestaurante")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPlato");

                    b.HasIndex("Categoria");

                    b.HasIndex("IdRestaurante");

                    b.ToTable("Plato", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Restaurante", b =>
                {
                    b.Property<int>("IdRestaurante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRestaurante"));

                    b.Property<decimal>("Deuda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdRestaurante");

                    b.ToTable("Restaurante", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Role", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdRol");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Tiempo", b =>
                {
                    b.Property<int>("IdTiempo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTiempo"));

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Fin")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTiempo");

                    b.HasIndex("IdPedido");

                    b.ToTable("Tiempo", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Activo");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdUsuario");

                    b.HasIndex("Dni");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("PermisoRole", b =>
                {
                    b.Property<int>("IdPermisosIdPermiso")
                        .HasColumnType("int");

                    b.Property<int>("IdRolesIdRol")
                        .HasColumnType("int");

                    b.HasKey("IdPermisosIdPermiso", "IdRolesIdRol");

                    b.HasIndex("IdRolesIdRol");

                    b.ToTable("RolesPermisos", (string)null);
                });

            modelBuilder.Entity("RoleRole", b =>
                {
                    b.Property<int>("RolesHijosIdRol")
                        .HasColumnType("int");

                    b.Property<int>("RolesPadresIdRol")
                        .HasColumnType("int");

                    b.HasKey("RolesHijosIdRol", "RolesPadresIdRol");

                    b.HasIndex("RolesPadresIdRol");

                    b.ToTable("RoleRole", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.AdminCocina", b =>
                {
                    b.HasBaseType("Modelo.Models.Persona");

                    b.Property<int?>("IdRestaurante")
                        .HasColumnType("int");

                    b.HasIndex("IdRestaurante");

                    b.ToTable("AdminCocina", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.AdminGeneral", b =>
                {
                    b.HasBaseType("Modelo.Models.Persona");

                    b.Property<string>("NivelAcceso")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Total");

                    b.ToTable("AdminGeneral", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.AdminRestaurante", b =>
                {
                    b.HasBaseType("Modelo.Models.Persona");

                    b.Property<int?>("IdRestaurante")
                        .HasColumnType("int");

                    b.HasIndex("IdRestaurante");

                    b.ToTable("AdminRestaurante", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Cadete", b =>
                {
                    b.HasBaseType("Modelo.Models.Persona");

                    b.Property<int>("DniCadete")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Activo");

                    b.ToTable("Cadete", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.CajeroRestaurante", b =>
                {
                    b.HasBaseType("Modelo.Models.Persona");

                    b.Property<int?>("IdRestaurante")
                        .HasColumnType("int");

                    b.HasIndex("IdRestaurante");

                    b.ToTable("CajeroRestaurante", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Cliente", b =>
                {
                    b.HasBaseType("Modelo.Models.Persona");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DniCliente")
                        .HasColumnType("int");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("Modelo.Models.Aderezo", b =>
                {
                    b.HasOne("Modelo.Models.Restaurante", "IdRestauranteNavigation")
                        .WithMany("Aderezos")
                        .HasForeignKey("IdRestaurante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdRestauranteNavigation");
                });

            modelBuilder.Entity("Modelo.Models.AderezoPedidoPlato", b =>
                {
                    b.HasOne("Modelo.Models.Aderezo", "Aderezo")
                        .WithMany()
                        .HasForeignKey("AderezoIdAderezo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Aderezo", "IdAderezoNavigation")
                        .WithMany("AderezoPedidoPlatos")
                        .HasForeignKey("IdAderezo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.PedidoPlato", "IdPedidoPlatoNavigation")
                        .WithMany("AderezoPedidoPlatos")
                        .HasForeignKey("IdPedidoPlato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.PedidoPlato", "PedidoPlato")
                        .WithMany()
                        .HasForeignKey("PedidoPlatoIdPedidoPlato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aderezo");

                    b.Navigation("IdAderezoNavigation");

                    b.Navigation("IdPedidoPlatoNavigation");

                    b.Navigation("PedidoPlato");
                });

            modelBuilder.Entity("Modelo.Models.CadetePedido", b =>
                {
                    b.HasOne("Modelo.Models.Cadete", "DniCadeteNavigation")
                        .WithMany("CadetePedidos")
                        .HasForeignKey("DniCadete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("CadetePedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DniCadeteNavigation");

                    b.Navigation("IdPedidoNavigation");
                });

            modelBuilder.Entity("Modelo.Models.Menu", b =>
                {
                    b.HasOne("Modelo.Models.Restaurante", "IdRestauranteNavigation")
                        .WithMany("Menus")
                        .HasForeignKey("IdRestaurante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdRestauranteNavigation");
                });

            modelBuilder.Entity("Modelo.Models.Pedido", b =>
                {
                    b.HasOne("Modelo.Models.Cliente", "DniClienteNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("DniCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Restaurante", "IdRestauranteNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdRestaurante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DniClienteNavigation");

                    b.Navigation("IdRestauranteNavigation");
                });

            modelBuilder.Entity("Modelo.Models.PedidoPlato", b =>
                {
                    b.HasOne("Modelo.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("PedidoPlatos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Plato", "IdPlatoNavigation")
                        .WithMany("PedidoPlatos")
                        .HasForeignKey("IdPlato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPedidoNavigation");

                    b.Navigation("IdPlatoNavigation");
                });

            modelBuilder.Entity("Modelo.Models.Plato", b =>
                {
                    b.HasOne("Modelo.Models.Categoria", "CategoriaNavigation")
                        .WithMany()
                        .HasForeignKey("Categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Restaurante", "IdRestauranteNavigation")
                        .WithMany("Platos")
                        .HasForeignKey("IdRestaurante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaNavigation");

                    b.Navigation("IdRestauranteNavigation");
                });

            modelBuilder.Entity("Modelo.Models.Tiempo", b =>
                {
                    b.HasOne("Modelo.Models.Pedido", "Pedido")
                        .WithMany("Tiempos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Modelo.Models.Usuario", b =>
                {
                    b.HasOne("Modelo.Models.Persona", "DniNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("Dni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Role", "IdRolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DniNavigation");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("PermisoRole", b =>
                {
                    b.HasOne("Modelo.Models.Permiso", null)
                        .WithMany()
                        .HasForeignKey("IdPermisosIdPermiso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("IdRolesIdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleRole", b =>
                {
                    b.HasOne("Modelo.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesHijosIdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesPadresIdRol")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelo.Models.AdminCocina", b =>
                {
                    b.HasOne("Modelo.Models.Persona", null)
                        .WithOne()
                        .HasForeignKey("Modelo.Models.AdminCocina", "Dni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Restaurante", "IdRestauranteNavigation")
                        .WithMany("AdminCocinas")
                        .HasForeignKey("IdRestaurante");

                    b.Navigation("IdRestauranteNavigation");
                });

            modelBuilder.Entity("Modelo.Models.AdminGeneral", b =>
                {
                    b.HasOne("Modelo.Models.Persona", null)
                        .WithOne()
                        .HasForeignKey("Modelo.Models.AdminGeneral", "Dni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelo.Models.AdminRestaurante", b =>
                {
                    b.HasOne("Modelo.Models.Persona", null)
                        .WithOne()
                        .HasForeignKey("Modelo.Models.AdminRestaurante", "Dni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Restaurante", "IdRestauranteNavigation")
                        .WithMany("AdminRestaurantes")
                        .HasForeignKey("IdRestaurante");

                    b.Navigation("IdRestauranteNavigation");
                });

            modelBuilder.Entity("Modelo.Models.Cadete", b =>
                {
                    b.HasOne("Modelo.Models.Persona", null)
                        .WithOne()
                        .HasForeignKey("Modelo.Models.Cadete", "Dni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelo.Models.CajeroRestaurante", b =>
                {
                    b.HasOne("Modelo.Models.Persona", null)
                        .WithOne()
                        .HasForeignKey("Modelo.Models.CajeroRestaurante", "Dni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Models.Restaurante", "Restaurante")
                        .WithMany("CajeroRestaurantes")
                        .HasForeignKey("IdRestaurante");

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("Modelo.Models.Cliente", b =>
                {
                    b.HasOne("Modelo.Models.Persona", null)
                        .WithOne()
                        .HasForeignKey("Modelo.Models.Cliente", "Dni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelo.Models.Aderezo", b =>
                {
                    b.Navigation("AderezoPedidoPlatos");
                });

            modelBuilder.Entity("Modelo.Models.Pedido", b =>
                {
                    b.Navigation("CadetePedidos");

                    b.Navigation("PedidoPlatos");

                    b.Navigation("Tiempos");
                });

            modelBuilder.Entity("Modelo.Models.PedidoPlato", b =>
                {
                    b.Navigation("AderezoPedidoPlatos");
                });

            modelBuilder.Entity("Modelo.Models.Persona", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Modelo.Models.Plato", b =>
                {
                    b.Navigation("PedidoPlatos");
                });

            modelBuilder.Entity("Modelo.Models.Restaurante", b =>
                {
                    b.Navigation("Aderezos");

                    b.Navigation("AdminCocinas");

                    b.Navigation("AdminRestaurantes");

                    b.Navigation("CajeroRestaurantes");

                    b.Navigation("Menus");

                    b.Navigation("Pedidos");

                    b.Navigation("Platos");
                });

            modelBuilder.Entity("Modelo.Models.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Modelo.Models.Cadete", b =>
                {
                    b.Navigation("CadetePedidos");
                });

            modelBuilder.Entity("Modelo.Models.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
